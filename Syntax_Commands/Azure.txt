npm install -g azure-functions-core-tools   --> to install or update azure function core tools
npm uninstall -g azure-functions-core-tools  --> to uninstall azure function core tools

az login

az group create --location centralus --name <resource-groupname>
az group delete --name <resource-groupname> --no-wait --yes

az appservice plan create --name <appservice_name> --resource-group <resource-groupname> --sku b1
az webapp create --name <webapp-name> --resource-group <resource-groupname> --plan <appservice-name>
az webapp list --resource-group <Resourcegroup_name>
az webapp deployment source config-zip --resource-group <Resourcegroup_name> --src api.zip --name <name-of-your-api-app>
az webapp config set
az webapp config appsettings set --resource-group <Resourcegroup_name> --name 
az webapp show
az webapp deployment user set --user-name <username> --password <password>
az webapp identity assign --name myApp --resource-group myResourceGroup

az webapp update --set clientCertEnabled=true --name <app-name> --resource-group <group-name>

az storage account create --name <stoage-account-name> --resource-group <resource-groupname> --location <location-name> --sku Standard_LRS
az storage container create --account-name <stoage-account-name> --name <container-name>
az storage blob upload --account-name <stoage-account-name> --container-name <container-name> --name <blob-file-name> --file sample.txt
az storage blob download --account-name <stoage-account-name> --container-name <container-name> --name <blob-file-name> --file sample.txt
az storage container set-permission --account-name <stoage-account-name> --name <container-name> --public-access blob
az stoage blob list --account-name <stoage-account-name> --container-name <container-name> --output table

azcopy login --tenant-id=<tenant-id>
azcopy make "https://<storageaccount-url>/container-name"
azcopy copy "blob-name" "<blob-url>"    -> copy local to blob
azcopy copy "<blob-url>" "blob-name"    -> copy blob to 

az cosmosdb create -n newaccount6000 -g demogrp1 --default-consistency-level Session --locations regionName='West US 2' failoverPriority=0 isZoneRedundant=False
az cosmosdb create -n newaccount5000 -g demogrp1 --default-consistency-level Session --locations regionName='West US 2' failoverPriority=0 isZoneRedundant=False --locations regionName='East US 2' failoverPriority=1 isZoneRedundant=False
az cosmosdb create -n newaccount6000 -g demogrp1 --default-consistency-level Session --locations regionName='West US 2' failoverPriority=0 isZoneRedundant=False --capabilities EnableTable

az ad sp create-for-rbac -n secretapp --skip-assignment
az keyvault set-policy --name demovault9090 --spn "<serviceprincipal-appid>" --secret-permissions backup delete get list set
az keyvault set-policy --name demovault9090 --spn "<serviceprincipal-appid>" --key-permissions backup delete get list create encrypt decrypt update

az vm encryption enable -g <resource-groupname> --name <vm-name> --disk-encryption-keyvault <keyvault-name>

command creates an alert when the average CPU percentage for a virtual machine goes beyond 80% for a period of 5 minutes.
az monitor metrics alert create -n demoalert -g demogrp1 --scopes /subscriptions/20c6eec9-2d80-4700-b0f6-4fde579a8783/resourceGroups/demogrp1/providers/Microsoft.Compute/virtualMachines/linuxvm --condition "avg Percentage CPU > 80" --window-size 5m --evaluation-frequency 1m --description "High CPU"

Azure Service Bus - Azure CLI
You can use the following commands to work with the Azure Service Bus service

// You can set the following variables for your script

$namespace="appnamespace4000"

$resourcegrp="demogrp1"

$location="Central US"

$queuename="appqueue"

$topicname="apptopic"

$subscriptionName="SubscriptionA"

// You can use the following command to create a service bus namespace

az servicebus namespace create --name $namespace --resource-group $resourcegrp --location $location --sku Standard

// You can use the following command to create a service bus queue

az servicebus queue create --resource-group $resourcegrp --namespace-name $namespace --name $queuename --max-size 1024

// You can use the following command to create a service bus topic

az servicebus topic create --resource-group $resourcegrp --namespace-name $namespace --name $topicname --max-size 1024

// You can use the following command to create a service bus subscription

az servicebus topic subscription create --resource-group $resourcegrp --namespace-name $namespace --topic-name $topicname --name $subscriptionName

az eventgrid event-subscription create --name <subscription-name> --source-resource-id <full-resource-id> --endpoint-type servicebusqueue --endpoint <entire-resource-id>

az provider list --query "[].namespace"
az provider register --namespace Microsoft.CDN

az acr create --name <registry-name> --resource-group AppSvc-DockerTutorial-rg --sku Basic --admin-enabled true

Azure function
-----------------------------------------
func init --worker-runtime dotnet --force
func new --template "HTTP trigger" --name <"trigger-name">
func azure functionapp publish <function-app-name>
func start --build

dotnet
--------------------------------------
dotnet new console --name <app-name> --output .
dotnet new webapi --output . --name <webapi_name>
dotnet add package <package-name> --version <version-number>

-Azure.Storage.Blobs
-Azure.Storage.Queues
-Microsoft.Identity.Client
-Microsoft.Graph
-Microsoft.Graph.Auth
-Microsoft.Azure.EventGrid
-Microsoft.ApplicationInsights
-Microsoft.ApplicationInsights.AspNetCore
-Microsoft.ApplicationInsights.PerfCounterCollector

dotnet build
dotnet run


powershell 
----------------------------------------
$location="Central US"

$resourcegrp="newgrp"

$webappname="demoapp4040"

New-AzResourceGroup -Name $resourcegrp -Location $location
New-AzAppServicePlan -Name $webappname -Location $location -ResourceGroupName $resourcegrp -Tier Standard
New-AzWebApp -Name $webappname -Location $location -ResourceGroupName $resourcegrp -AppServicePlan $webappname
New-AzWebAppSlot -Name $webappname -ResourceGroupName $resourcegrp -Slot "staging"